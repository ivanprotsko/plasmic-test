// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cQ6n6YybaMq43XmcPKMuLG
// Component: jsIjDnzjwC
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsizrLmmZrWgssi } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: IzrLmmZRWgssi/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: cQ6n6YybaMq43XmcPKMuLG/projectcss
import sty from "./PlasmicAboutSection.module.css"; // plasmic-import: jsIjDnzjwC/css

export type PlasmicAboutSection__VariantMembers = {
  mobile: "mobile";
};

export type PlasmicAboutSection__VariantsArgs = {
  mobile?: SingleBooleanChoiceArg<"mobile">;
};

type VariantPropType = keyof PlasmicAboutSection__VariantsArgs;
export const PlasmicAboutSection__VariantProps = new Array<VariantPropType>(
  "mobile"
);

export type PlasmicAboutSection__ArgsType = {};
type ArgPropType = keyof PlasmicAboutSection__ArgsType;
export const PlasmicAboutSection__ArgProps = new Array<ArgPropType>();

export type PlasmicAboutSection__OverridesType = {
  root?: p.Flex<"div">;
  aboutTikTokSection?: p.Flex<"div">;
  surface3?: p.Flex<"div">;
  title?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultAboutSectionProps {
  mobile?: SingleBooleanChoiceArg<"mobile">;
  className?: string;
}

export const defaultAboutSection__Args: Partial<PlasmicAboutSection__ArgsType> =
  {};

function PlasmicAboutSection__RenderFunc(props: {
  variants: PlasmicAboutSection__VariantsArgs;
  args: PlasmicAboutSection__ArgsType;
  overrides: PlasmicAboutSection__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultAboutSection__Args, props.args);
  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsizrLmmZrWgssi()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <div
          data-plasmic-name={"aboutTikTokSection"}
          data-plasmic-override={overrides.aboutTikTokSection}
          className={classNames(projectcss.all, sty.aboutTikTokSection)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"surface3"}
            data-plasmic-override={overrides.surface3}
            hasGap={true}
            className={classNames(projectcss.all, sty.surface3)}
          >
            <div
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.title
              )}
            >
              {"Catch  on \nwith \nTikTok!"}
            </div>

            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {
                "In the digital age, it's hard to stay away from a phenomenon like tiktok. Entertainment content \nis not the only resource of this platform. This is a new opportunity! This is your new opportunity to tell the world about your product and skyrocket your sales. Still thinking? Just a fact: TikTok surpassed both google and facebook in 2021 to become \nthe most visited platform and keeps growing. Take the chance \nto become viral and we will lead you through this journey!"
              }
            </div>
          </p.Stack>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "aboutTikTokSection", "surface3", "title", "text"],
  aboutTikTokSection: ["aboutTikTokSection", "surface3", "title", "text"],
  surface3: ["surface3", "title", "text"],
  title: ["title"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  aboutTikTokSection: "div";
  surface3: "div";
  title: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAboutSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAboutSection__VariantsArgs;
    args?: PlasmicAboutSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAboutSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAboutSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAboutSection__ArgProps,
      internalVariantPropNames: PlasmicAboutSection__VariantProps
    });

    return PlasmicAboutSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAboutSection";
  } else {
    func.displayName = `PlasmicAboutSection.${nodeName}`;
  }
  return func;
}

export const PlasmicAboutSection = Object.assign(
  // Top-level PlasmicAboutSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    aboutTikTokSection: makeNodeComponent("aboutTikTokSection"),
    surface3: makeNodeComponent("surface3"),
    title: makeNodeComponent("title"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicAboutSection
    internalVariantProps: PlasmicAboutSection__VariantProps,
    internalArgProps: PlasmicAboutSection__ArgProps
  }
);

export default PlasmicAboutSection;
/* prettier-ignore-end */
